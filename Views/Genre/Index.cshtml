@using Netflex.Models.Genre
@model IPagedList<GenreViewModel>

<h2 class="text-center mb-5">Genre</h2>

<div class="row mb-5">
	<div class="col">
		<a class="btn btn-primary" asp-controller="Genre" asp-action="Create">New Genre</a>
	</div>
	<div class="col">
	</div>
</div>
@* Search *@
<form asp-action="Index" method="get" class="mb-4">
	<div class="row g-2">
		<div class="col-md-8">
			<label class="form-label">Search by name:</label>
			<input type="text" name="SearchString" class="form-control" value="@ViewData["CurrentFilter"]" placeholder="Searching..." onchange="this.form.submit()" />
		</div>
		<div class="col-md-3">
			<label class="form-label">Sort By:</label>
			<select class="form-select" name="SortBy" onchange="this.form.submit()">
				<option value="name" selected="@(ViewData["SortBy"] as string == "name" ? "selected" : null)">Name (A-Z)</option>
				<option value="name_desc" selected="@(ViewData["SortBy"] as string == "name_desc" ? "selected" : null)">Name (Z-A)</option>
			</select>
		</div>
		<div class="col-md-1 d-flex align-items-end">
			<button asp-action="Index" class="btn btn-secondary"><i class="bi bi-arrow-clockwise"></i> Reset</button>
		</div>
	</div>

</form>



@**@
<div class="table-responsive text-white">
	<table class="table table-striped table-hover">
		<thead class="table-dark">
			<tr>
				<th>ID</th>
				<th>Name</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model)
			{
				<tr>
					<td>@item.Id</td>
					<td>@item.Name</td>
					<td class="text-nowrap">
						<a class="btn btn-sm btn-primary" asp-controller="Genre" asp-action="Edit" asp-route-id="@item.Id">
							Edit
						</a>
						<form asp-controller="Genre" asp-action="Delete" asp-route-id="@item.Id" method="post" onsubmit="return confirm('Are you sure you want to delete this item?')">
							<input type="hidden" name="_method" value="DELETE" />
							<button type="submit" class="btn btn-sm btn-danger">Delete</button>
						</form>

					</td>
				</tr>
			}
		</tbody>
	</table>
</div>
<div>
	@Html.PagedListPager(Model, page => Url.Action("Index", new
		{
			PageNumber = page,
			SearchString = ViewData["CurrentFilter"],
			SortBy = ViewData["SortBy"]
		}), new PagedListRenderOptions()
{
	DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
	DisplayLinkToNextPage = PagedListDisplayMode.Always,
	LiElementClasses = new string[] { "page-item" },
	PageClasses = new string[] { "page-link" }
})

</div>

